# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and deploy to EC2
name: Java CI/CD with Gradle and Docker

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
    
    - name: Create application.properties
      run: |
        mkdir -p seilomun/src/main/resources
        cat << 'EOF' > seilomun/src/main/resources/application.properties
        ${{ secrets.APPLICATION_PROPERTIES }}
        EOF
    
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582
      with:
        gradle-version: '8.9'
    
    - name: Build with Gradle
      run: |
        cd seilomun
        gradle build -x test

  build-docker-image:
    needs: build-and-test
    runs-on: ubuntu-latest
    permissions:
      contents: read
    # main 브랜치에 push될 때만 실행
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
    
    - name: Create application.properties
      run: |
        mkdir -p seilomun/src/main/resources
        cat << 'EOF' > seilomun/src/main/resources/application.properties
        ${{ secrets.APPLICATION_PROPERTIES }}
        EOF
    
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582
      with:
        gradle-version: '8.9'
    
    # Spring Boot 어플리케이션 Build
    - name: Build with Gradle
      run: |
        cd seilomun
        gradle build -x test
    
    # Docker 이미지 Build
    - name: docker image build
      run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/seilomun .
    
    # DockerHub Login (push 하기 위해)
    - name: docker login
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}
    
    # Docker hub 로 push
    - name: Docker Hub push
      run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/seilomun

  deploy-to-ec2:
    needs: build-docker-image
    runs-on: self-hosted
    # main 브랜치에 push될 때만 실행
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
    - name: docker pull
      run: sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/seilomun
    
    - name: docker stop container
      run: |
        if [ $(sudo docker ps -a -q -f name=seilomun) ]; then
          sudo docker stop seilomun
          sudo docker rm seilomun
        fi
    
    - name: docker run new container
      run: sudo docker run --rm -it -d -p 80:8080 --name seilomun ${{ secrets.DOCKERHUB_USERNAME }}/seilomun
    
    - name: delete old docker image
      run: sudo docker system prune -f

  dependency-submission:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    # PR일 때는 실행하지 않음 (push일 때만)
    if: github.event_name == 'push'
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
    
    - name: Create application.properties
      run: |
        mkdir -p seilomun/src/main/resources
        cat << 'EOF' > seilomun/src/main/resources/application.properties
        ${{ secrets.APPLICATION_PROPERTIES }}
        EOF
    
    - name: Generate and submit dependency graph
      uses: gradle/actions/dependency-submission@af1da67850ed9a4cedd57bfd976089dd991e2582
      with:
        build-root-directory: seilomun
        gradle-version: '8.9'
